#!/usr/bin/env bash
# WARN: This script has no posix compliance

connect_tmux_session() {
    local session="${session//./_}"
    tmux has-session -t "$session" &> /dev/null \
    && if [[ -n "$TMUX" ]]; then tmux switch-client -t "$session";
                            else tmux attach-session -t "$session"; fi
}

truncate_dirname() {
    printf '%s' "$(echo "$1"|rev|cut -d/ -f'-2'|rev)"
}

make_tmux_session() {
    local session="${session//./_}"
    if [[ -n "$TMUX" ]]; then
        tmux new-session -d -s "$session"
        tmux switch-client -t "$session"
    else
        tmux new-session -s "$session"
    fi
}

interactive_select() {
    exitcode=0
    sessiondir="$(zoxide query --interactive)" || exit $?
    pushd "$sessiondir"                        || exit $?

    session="$(truncate_dirname "$sessiondir")"
    connect_tmux_session || make_tmux_session || exitcode=$?

    popd || exit $exitcode
    exit $exitcode
}

session_select() {
    session=$(tmux list-session -F \#S) || exit 0
    session=$(echo "$session" | fzf)
    connect_tmux_session || exit $?

    exit 0;
}

session="$(truncate_dirname "$PWD")"

while getopts :ils: opt; do
    case "$opt" in
    i) interactive_select ;;
    s) session="$OPTARG"  ;;
    l) session_select     ;;
    ?) scriptname="$(basename "$0")"
       printf "%s: error: unknown argument '%s'\n" "$scriptname" "$OPTARG"
       printf 'usage: %s [-i] [-s session_name]\n' "$scriptname"
       exit 2 ;;
    esac
done

connect_tmux_session && exit 0

if [[ "$session" = "$(truncate_dirname "$PWD")" ]]; then
    make_tmux_session || exit $?
else
    if [[ -d "$session" ]]; then dirname="$session";
    else dirname="$(zoxide query "$session")" || exit $?; fi

    pushd "$dirname"  || exit $?
    make_tmux_session || exit $?
    popd              || exit $?
fi
